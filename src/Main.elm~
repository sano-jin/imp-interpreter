module Main exposing (..)

import Browser
import Html exposing (Html, button, div, input, text, node, ul, li, textarea)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onInput)
import Parser exposing (run, DeadEnd, Problem (..))
import ImpParser as IP
import Set as S
import Dict as D

-- main                               
main = Browser.sandbox { init = init
                       , update = update
                       , view = view
                       }
         
-- Model
type alias Model =
    { inputKB : String
    , inputQuery : String
    , kb : List String
    , query : String
    , result : String
    , errors : List DeadEnd
    }

init : Model
init =
    { inputKB = "hoge :- hoge(), hoge(X, hoge(g,A)).\nfuga."
    , inputQuery = "hoge"          
    , kb = []
    , query = ""
    , result = ""
    , errors = []
    }

-- Update

type Msg
    = ChangeKB String
    | ChangeQuery String
    | Eval String String

bothResult : Result err ok1 -> Result err ok2 -> Result err (ok1, ok2)
bothResult r1 r2 =
    case r1 of
        Err err1 -> Err err1
        Ok ok1 -> case r2 of
                      Err err2 -> Err err2
                      Ok ok2 -> Ok (ok1, ok2)
    
update : Msg -> Model -> Model
update msg model =
    case msg of
        Eval strKB strQuery ->
                    case bothResult (run PP.parser strKB) (run PP.parserQuery strQuery) of
                        Ok (kbRules, queryAtom) ->
                            { model | errors = []
                            , kb = List.map PP.showRule kbRules
                            , query = PP.showAtom queryAtom
                            , result = "" }

                        Err err -> { model | errors = err
                                   , kb = []
                                   , query = ""
                                   , result = "error" }
        ChangeKB str ->
            { model | inputKB = str }

        ChangeQuery str ->
            { model | inputQuery = str }

-- View

css path =
    node "link" [rel "stylesheet", href path ] []

view : Model -> Html Msg
view model =
    div [ class "interpreter" ]
        [ node "link"
              [rel "stylesheet"
              , href "https://fonts.googleapis.com/css2?family=Inconsolata:wght@300&display=swap"
              ] []
        , css "style.css"
        , div [ class "console" ]
            [ input [ class "query-reader", class "reader"
                    , placeholder "input lambda expression \u{23CE}"
                    , value model.inputQuery, onInput ChangeQuery ] []
            , textarea [ class "kb-reader", class "reader"
                    , placeholder "input lambda expression \u{23CE}"
                    , value model.inputKB, onInput ChangeKB ] []
            , button [ class "submitter"
                     , onClick <| Eval model.inputKB model.inputQuery ] [ text "run" ]
            , div [] [ text model.result ]
            , div [] [ text model.query ]
            , ul [] <|
                List.map (\err ->
                              li [] [ text <| PP.problem2String err.problem
                                    , div [] [ text <|
                                                   "at row: " ++ String.fromInt err.row
                                                   ++ ", col: " ++ String.fromInt err.col ]
                                    ]
                         ) model.errors
            , ul [ class "rules" ] 
                  <| List.map (\rule -> li [] [ text <| rule ++ "." ]) model.kb   
            ]
        ]
    
